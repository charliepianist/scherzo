/**
 * @fileoverview
 * 
 * A file containing the pseudo-authentication scheme used to identify whether users 
 * have this extension. Note that this is far from being cryptographically secure;
 * TODO: replace this with a more secure scheme
 */

goog.module('scherzo.crypto.auth');

const HASH = goog.require('scherzo.crypto.hash');

exports.Auth = class {
    /**
     * 
     * @param {function(): Date} dateProvider 
     */
    constructor(dateProvider = () => new Date()) {
        /** A function that provides the current date (helps with testing)
         * @type {function(): Date} */
        this._dateProvider = dateProvider;
    }

    /**
     * Generate an authentication string for today to send to another auth object
     * 
     * @returns {string} A pseudo-authentication string to send and be verified
     */
    generateAuth() {
        return this._generateAuth(0);
    }

    /**
     * Generate an authentication string for a given day to send to another auth object
     * 
     * @param {number} offset How many days ago the string represents
     * @returns {string} A pseudo-authentication string to send and be verified
     */
    _generateAuth(offset) {
        let now = this._dateProvider();
        now.setDate(now.getDate() - offset);
        let nowStr = now.getUTCFullYear() + '/' + now.getUTCMonth() + '/' + now.getUTCDay();
        let fullStr = nowStr + exports.Auth.getNoise(now.getUTCDate());
        return HASH(fullStr);
    }

    /**
     * Check if a string was most likely generated by this class
     * 
     * @param {string} auth A pseudo-authentication string to check
     * @returns {boolean} Whether the auth string is valid + not expired
     */
    verifyAuth(auth) {
        return auth === this.generateAuth() || auth === this._generateAuth(1);
    }

    /**
     * Generate a (deterministic) string to assist in generating and verifying auth
     * 
     * @param {number} i A number used to help determine what the noise looks like
     * @returns {string} A constant string that is always the same for given i, 
     *                   but used in auth
     */
    static getNoise(i) {
        let hash = HASH('sWG(U' + i + 'J34fe09g#' + i + '$U*G(R');
        let noise = hash.substring(i % 6, i % 6 + 15 + (i % 3) * 3);
        return noise;
    }
}